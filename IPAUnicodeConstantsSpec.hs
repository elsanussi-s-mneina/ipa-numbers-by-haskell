module IPAUnicodeConstantsSpec where
import Control.Monad (unless)

import IPAConstants.IPAUnicodeConstants


runIpaUnicodeSpec :: IO ()
runIpaUnicodeSpec =
	putStrLn "Unicode code points for IPA characters (and diacritics)"
	>> unless (latin_small_letter_p == 'p') (error "latin small letter p")
	>> unless (latin_small_letter_p == '\x0070') (error "latin small letter p code point")
	>> unless (latin_small_letter_b == 'b') (error "latin small letter b")
	>> unless (latin_small_letter_b == '\x0062') (error "latin small letter b code point")
	>> unless (latin_small_letter_t == 't') (error "latin small letter t")
	>> unless (latin_small_letter_t == '\x0074') (error "latin small letter t code point")
	>> unless (latin_small_letter_d == 'd') (error "latin small letter d")
	>> unless (latin_small_letter_d == '\x0064') (error "latin small letter d code point")
	>> unless (latin_small_letter_t_with_retroflex_hook == 'ʈ') (error "latin small letter t with retroflex hook")
	>> unless (latin_small_letter_t_with_retroflex_hook == '\x0288') (error "latin small letter t with retroflex hook code point")
	>> unless (latin_small_letter_d_with_tail == 'ɖ') (error "latin small letter d with tail")
	>> unless (latin_small_letter_d_with_tail == '\x0256') (error "latin small letter d with tail code point")
	>> unless (latin_small_letter_c == 'c') (error "latin small letter c")
	>> unless (latin_small_letter_c == '\x0063') (error "latin small letter c code point")
	>> unless (latin_small_letter_dotless_j_with_stroke == 'ɟ') (error "latin small dotless j with stroke")
	>> unless (latin_small_letter_dotless_j_with_stroke == '\x025F') (error "latin small dotless j with stroke code point")
	>> unless (latin_small_letter_k == 'k') (error "latin small letter k")
	>> unless (latin_small_letter_k == '\x006B') (error "latin small letter k code point")
	>> unless (latin_small_letter_g == 'g') (error "latin small letter g")
	>> unless (latin_small_letter_g == '\x0067') (error "latin small letter g code point")
	>> unless (latin_small_letter_script_g == 'ɡ') (error "latin small letter script g")
	>> unless (latin_small_letter_script_g == '\x0261') (error "latin small letter script g code point")
	>> unless (latin_small_letter_q == 'q') (error "latin small letter q")
	>> unless (latin_small_letter_q == '\x0071') (error "latin small letter q code point")
	>> unless (latin_letter_small_capital_g == 'ɢ') (error "latin letter small capital g")
	>> unless (latin_letter_small_capital_g == '\x0262') (error "latin letter small capital g code point")
	>> unless (latin_letter_glottal_stop == 'ʔ') (error "latin letter glottal stop")
	>> unless (latin_letter_glottal_stop == '\x0294') (error "latin letter glottal stop code point")
	>> unless (latin_small_letter_m == 'm') (error "latin small letter m")
	>> unless (latin_small_letter_m == '\x006D') (error "latin small letter m code point")
	>> unless (latin_small_letter_m_with_hook == 'ɱ') (error "latin small letter m with hook")
	>> unless (latin_small_letter_m_with_hook == '\x0271') (error "latin small letter m with hook code point")
	>> unless (latin_small_letter_n == 'n') (error "latin small letter n")
	>> unless (latin_small_letter_n == '\x006E') (error "latin small letter n code point")
	>> unless (latin_small_letter_n_with_retroflex_hook == 'ɳ') (error "latin small letter n with retroflex hook")
	>> unless (latin_small_letter_n_with_retroflex_hook == '\x0273') (error "latin small letter n with retroflex hook code point")
	>> unless (latin_small_letter_n_with_left_hook == 'ɲ') (error "latin small letter n with left hook")
	>> unless (latin_small_letter_n_with_left_hook == '\x0272') (error "latin small letter n with left hook code point")
	>> unless (latin_small_letter_eng == 'ŋ') (error "latin small letter eng")
	>> unless (latin_small_letter_eng == '\x014B') (error "latin small letter eng code point")
	>> unless (latin_letter_small_capital_n == 'ɴ') (error "latin letter small capital n")
	>> unless (latin_letter_small_capital_n == '\x0274') (error "latin letter small capital n code point")
	>> unless (latin_letter_small_capital_b == 'ʙ') (error "latin letter small capital b")
	>> unless (latin_letter_small_capital_b == '\x0299') (error "latin letter small capital b code point")
	>> unless (latin_small_letter_r == 'r') (error "latin small letter r")
	>> unless (latin_small_letter_r == '\x0072') (error "latin small letter r code point")
	>> unless (latin_letter_small_capital_r == 'ʀ') (error "latin letter small capital r")
	>> unless (latin_letter_small_capital_r == '\x0280') (error "latin letter small capital r code point")
	>> unless (latin_small_letter_v_with_right_hook == 'ⱱ') (error "latin small letter v with right hook")
	>> unless (latin_small_letter_v_with_right_hook == '\x2C71') (error "latin small letter v with right hook code point")
	>> unless (latin_small_letter_r_with_fishhook == 'ɾ') (error "latin small letter r with fishhook")
	>> unless (latin_small_letter_r_with_fishhook == '\x027E') (error "latin small letter r with fishhook code point")
	>> unless (latin_small_letter_r_with_tail == 'ɽ') (error "latin small letter r with tail")
	>> unless (latin_small_letter_r_with_tail == '\x027D') (error "latin small letter r with tail code point")
	>> unless (latin_small_letter_phi == 'ɸ') (error "latin small letter phi")
	>> unless (latin_small_letter_phi == '\x0278') (error "latin small letter phi code point")
	>> unless (greek_small_letter_beta == 'β') (error "greek small letter beta")
	>> unless (greek_small_letter_beta == '\x03B2') (error "latin small letter beta code point")
	>> unless (latin_small_letter_f == 'f') (error "latin small letter f")
	>> unless (latin_small_letter_f == '\x0066') (error "latin small letter f code point")
	>> unless (latin_small_letter_v == 'v') (error "latin small letter v")
	>> unless (latin_small_letter_v == '\x0076') (error "latin small letter v code point")
	>> unless (greek_small_letter_theta == 'θ') (error "greek small letter theta")
	>> unless (greek_small_letter_theta == '\x03B8') (error "greek small letter theta code point")
	>> unless (latin_small_letter_eth == 'ð') (error "latin small letter eth")
	>> unless (latin_small_letter_eth == '\x00F0') (error "latin small letter eth code point")
	>> unless (latin_small_letter_s == 's') (error "latin small letter s")
	>> unless (latin_small_letter_s == '\x0073') (error "latin small letter s code point")
	>> unless (latin_small_letter_z == 'z') (error "latin small letter z")
	>> unless (latin_small_letter_z == '\x007A') (error "latin small letter z code point")
	>> unless (latin_small_letter_esh == 'ʃ') (error "latin small letter esh")
	>> unless (latin_small_letter_esh == '\x0283') (error "latin small letter esh code point")
	>> unless (latin_small_letter_ezh == 'ʒ') (error "latin small letter ezh")
	>> unless (latin_small_letter_ezh == '\x0292') (error "latin small letter ezh code point")
	>> unless (latin_small_letter_s_with_hook == 'ʂ') (error "latin small letter s with hook")
	>> unless (latin_small_letter_s_with_hook == '\x0282') (error "latin small letter s with hook code point")
	>> unless (latin_small_letter_z_with_retroflex_hook == 'ʐ') (error "latin small letter z with retroflex hook")
	>> unless (latin_small_letter_z_with_retroflex_hook == '\x0290') (error "latin small letter z with retroflex hook code point")
	>> unless (latin_small_letter_c_with_cedilla == 'ç') (error "latin small letter c with cedilla")
	>> unless (latin_small_letter_c_with_cedilla == '\x00E7') (error "latin small letter c with cedilla code point")
	>> unless (latin_small_letter_j_with_crossed_tail == 'ʝ') (error "latin small letter j with crossed tail")
	>> unless (latin_small_letter_j_with_crossed_tail == '\x029D') (error "latin small letter j with crossed tail code point")
	>> unless (latin_small_letter_x == 'x') (error "latin small letter x")
	>> unless (latin_small_letter_x == '\x0078') (error "latin small letter x code point")
	>> unless (latin_small_letter_gamma == 'ɣ') (error "latin small letter gamma")
	>> unless (latin_small_letter_gamma == '\x0263') (error "latin small letter gamma code point")
	>> unless (greek_small_letter_chi == 'χ') (error "greek small letter chi")
	>> unless (greek_small_letter_chi == '\x03C7') (error "greek small letter chi code point")
	>> unless (latin_letter_small_capital_inverted_r == 'ʁ') (error "latin letter small capital inverted r")
	>> unless (latin_letter_small_capital_inverted_r == '\x0281') (error "latin letter small capital inverted r code point")
	>> unless (latin_small_letter_h_with_stroke == 'ħ') (error "latin small letter h with stroke")
	>> unless (latin_small_letter_h_with_stroke == '\x0127') (error "latin small letter h with stroke code point")
	>> unless (latin_letter_pharyngeal_voiced_fricative == 'ʕ') (error "latin letter pharyngeal voiced fricative")
	>> unless (latin_letter_pharyngeal_voiced_fricative == '\x0295') (error "latin letter pharyngeal voiced fricative code point")
	>> unless (latin_small_letter_h == 'h') (error "latin small letter h")
	>> unless (latin_small_letter_h == '\x0068') (error "latin small letter h code point")
	>> unless (latin_small_letter_h_with_hook == 'ɦ') (error "latin small letter h with hook")
	>> unless (latin_small_letter_h_with_hook == '\x0266') (error "latin small letter h with hook code point")
	>> unless (latin_small_letter_l_with_belt == 'ɬ') (error "latin small letter l with belt")
	>> unless (latin_small_letter_l_with_belt == '\x026C') (error "latin small letter l with belt code point")
	>> unless (latin_small_letter_lezh == 'ɮ') (error "latin small letter lezh")
	>> unless (latin_small_letter_lezh == '\x026E') (error "latin small letter lezh code point")
	>> unless (latin_small_letter_v_with_hook == 'ʋ') (error "latin small letter v with hook")
	>> unless (latin_small_letter_v_with_hook == '\x028B') (error "latin small letter v with hook code point")
	>> unless (latin_small_letter_turned_r == 'ɹ') (error "latin small letter turned r")
	>> unless (latin_small_letter_turned_r == '\x0279') (error "latin small letter turned r code point")
	>> unless (latin_small_letter_turned_r_with_hook == 'ɻ') (error "latin small letter turned r with hook")
	>> unless (latin_small_letter_turned_r_with_hook == '\x027B') (error "latin small letter turned r with hook code point")
	>> unless (latin_small_letter_j == 'j') (error "latin small letter j")
	>> unless (latin_small_letter_j == '\x006A') (error "latin small letter j code point")
	>> unless (latin_small_letter_turned_m_with_long_leg == 'ɰ') (error "latin small letter turned m with long leg")
	>> unless (latin_small_letter_turned_m_with_long_leg == '\x0270') (error "latin small letter turned m with long leg code point")
	>> unless (latin_small_letter_l == 'l') (error "latin small letter l")
	>> unless (latin_small_letter_l == '\x006C') (error "latin small letter l code point")
	>> unless (latin_small_letter_l_with_retroflex_hook == 'ɭ') (error "latin small letter l with retroflex hook")
	>> unless (latin_small_letter_l_with_retroflex_hook == '\x026D') (error "latin small letter l with retroflex hook code point")
	>> unless (latin_small_letter_turned_y == 'ʎ') (error "latin small letter turned y")
	>> unless (latin_small_letter_turned_y == '\x028E') (error "latin small letter turned y code point")
	>> unless (latin_letter_small_capital_l == 'ʟ') (error "latin letter small capital l")
	>> unless (latin_letter_small_capital_l == '\x029F') (error "latin letter small capital l code point")
	>> unless (latin_letter_bilabial_click == 'ʘ') (error "latin letter bilabial click")
	>> unless (latin_letter_bilabial_click == '\x0298') (error "latin letter bilabial click code point")
	>> unless (latin_letter_dental_click == 'ǀ') (error "latin letter dental click")
	>> unless (latin_letter_dental_click == '\x01C0') (error "latin letter dental click code point")
	>> unless (latin_letter_retroflex_click == 'ǃ') (error "latin letter retroflex click")
	>> unless (latin_letter_retroflex_click == '\x01C3') (error "latin letter retroflex click")
	>> unless (latin_letter_alveolar_click == 'ǂ') (error "latin letter alveolar click")
	>> unless (latin_letter_alveolar_click == '\x01C2') (error "latin letter alveolar click code point")
	>> unless (latin_letter_lateral_click == 'ǁ') (error "latin letter lateral click")
	>> unless (latin_letter_lateral_click == '\x01C1') (error "latin letter lateral click code point")
	>> unless (latin_small_letter_b_with_hook == 'ɓ') (error "latin small letter b with hook")
	>> unless (latin_small_letter_b_with_hook == '\x0253') (error "latin small letter b with hook code point")
	>> unless (latin_small_letter_d_with_hook == 'ɗ') (error "latin small letter d with hook")
	>> unless (latin_small_letter_d_with_hook == '\x0257') (error "latin small letter d with hook code point")
	>> unless (latin_small_letter_dotless_j_with_stroke_and_hook == 'ʄ') (error "latin small letter dotless j with stroke and hook")
	>> unless (latin_small_letter_dotless_j_with_stroke_and_hook == '\x0284') (error "latin small letter dotless j with stroke and hook code point")
	>> unless (latin_small_letter_g_with_hook == 'ɠ') (error "latin small letter g with hook")
	>> unless (latin_small_letter_g_with_hook == '\x0260') (error "latin small letter g with hook code point")
	>> unless (latin_letter_small_capital_g_with_hook == 'ʛ') (error "latin letter small capital g with hook")
	>> unless (latin_letter_small_capital_g_with_hook == '\x029B') (error "latin letter small capital g with hook code point")
	>> unless (modifier_letter_apostrophe == 'ʼ') (error "modifier letter apostrophe")
	>> unless (modifier_letter_apostrophe == '\x02BC') (error "modifier letter apostrophe code point")
	>> unless (latin_small_letter_i == 'i') (error "latin small letter i")
	>> unless (latin_small_letter_i == '\x0069') (error "latin small letter i code point")
	>> unless (latin_small_letter_y == 'y') (error "latin small letter y")
	>> unless (latin_small_letter_y == '\x0079') (error "latin small letter y code point")
	>> unless (latin_small_letter_i_with_stroke == 'ɨ') (error "latin small letter i with stroke")
	>> unless (latin_small_letter_i_with_stroke == '\x0268') (error "latin small letter i with stroke code point")
	>> unless (latin_small_letter_u_bar == 'ʉ') (error "latin small letter u bar")
	>> unless (latin_small_letter_u_bar == '\x0289') (error "latin small letter u bar code point")
	>> unless (latin_small_letter_turned_m == 'ɯ') (error "latin small letter turned m")
	>> unless (latin_small_letter_turned_m == '\x026F') (error "latin small letter turned m code point")
	>> unless (latin_small_letter_u == 'u') (error "latin small letter u")
	>> unless (latin_small_letter_u == '\x0075') (error "latin small letter u code point")
	>> unless (latin_letter_small_capital_i == 'ɪ') (error "latin letter small capital i")
	>> unless (latin_letter_small_capital_i == '\x026A') (error "latin letter small capital i code paint")
	>> unless (latin_letter_small_capital_y == 'ʏ') (error "latin letter small capital y")
	>> unless (latin_letter_small_capital_y == '\x028F') (error "latin letter small capital y code point")
	>> unless (latin_small_letter_upsilon == 'ʊ') (error "latin small letter upsilon")
	>> unless (latin_small_letter_upsilon == '\x028A') (error "latin small letter upsilon code point")
	>> unless (latin_small_letter_e == 'e') (error "latin small letter e")
	>> unless (latin_small_letter_e == '\x0065') (error "latin small letter e code point")
	>> unless (latin_small_letter_o_with_stroke == 'ø') (error "latin small letter o with stroke")
	>> unless (latin_small_letter_o_with_stroke == '\x00F8') (error "latin small letter o with stroke code point")
	>> unless (latin_small_letter_reversed_e == 'ɘ') (error "latin small letter reversed e")
	>> unless (latin_small_letter_reversed_e == '\x0258') (error "latin small letter reversed e code point")
	>> unless (latin_small_letter_barred_o == 'ɵ') (error "latin small letter barred o")
	>> unless (latin_small_letter_barred_o == '\x0275') (error "latin small letter barred o code point")
	>> unless (latin_small_letter_rams_horn == 'ɤ') (error "latin small letter rams horn")
	>> unless (latin_small_letter_rams_horn == '\x0264') (error "latin small letter rams horn code point")
	>> unless (latin_small_letter_o == 'o') (error "latin small letter o")
	>> unless (latin_small_letter_o == '\x006F') (error "latin small letter o code point")
	>> unless (latin_small_letter_schwa == 'ə') (error "latin small letter schwa")
	>> unless (latin_small_letter_schwa == '\x0259') (error "latin small letter schwa code point")
	>> unless (latin_small_letter_open_e == 'ɛ') (error "latin small letter open e")
	>> unless (latin_small_letter_open_e == '\x025B') (error "latin small letter open e code point")
	>> unless (latin_small_ligature_oe == 'œ') (error "latin small ligature oe")
	>> unless (latin_small_ligature_oe == '\x0153') (error "latin small ligature oe code point")
	>> unless (latin_small_letter_reversed_open_e == 'ɜ') (error "latin small letter reversed open e")
	>> unless (latin_small_letter_reversed_open_e == '\x025C') (error "latin small letter reversed open e code point")
	>> unless (latin_small_letter_closed_reversed_open_e == 'ɞ') (error "latin small letter closed reversed open e")
	>> unless (latin_small_letter_closed_reversed_open_e == '\x025E') (error "latin small letter closed reversed open e code point")
	>> unless (latin_small_letter_turned_v == 'ʌ') (error "latin small letter turned v")
	>> unless (latin_small_letter_turned_v == '\x028C') (error "latin small letter turned v code point")
	>> unless (latin_small_letter_open_o == 'ɔ') (error "latin small letter open o")
	>> unless (latin_small_letter_open_o == '\x0254') (error "latin small letter open o code point")
	>> unless (latin_small_letter_ae == 'æ') (error "latin small letter ae")
	>> unless (latin_small_letter_ae == '\x00E6') (error "latin small letter ae code point")
	>> unless (latin_small_letter_turned_a == 'ɐ') (error "latin small letter turned a")
	>> unless (latin_small_letter_turned_a == '\x0250') (error "latin small letter turned a code point")
	>> unless (latin_small_letter_a == 'a') (error "latin small letter a")
	>> unless (latin_small_letter_a == '\x0061') (error "latin small letter a code point")
	>> unless (latin_letter_small_capital_oe == 'ɶ') (error "latin letter small capital oe")
	>> unless (latin_letter_small_capital_oe == '\x0276') (error "latin letter small capital oe code point")
	>> unless (latin_small_letter_alpha == 'ɑ') (error "latin small letter alpha")
	>> unless (latin_small_letter_alpha == '\x0251') (error "latin small letter alpha code point")
	>> unless (latin_small_letter_turned_alpha == 'ɒ') (error "latin small letter turned alpha")
	>> unless (latin_small_letter_turned_alpha == '\x0252') (error "latin small letter turned alpha code point")
	>> unless (latin_small_letter_turned_w == 'ʍ') (error "latin small letter turned w")
	>> unless (latin_small_letter_turned_w == '\x028D') (error "latin small letter turned w code point")
	>> unless (latin_small_letter_w == 'w') (error "latin small letter w")
	>> unless (latin_small_letter_w == '\x0077') (error "latin small letter w code point")
	>> unless (latin_small_letter_turned_h == 'ɥ') (error "latin small letter turned h")
	>> unless (latin_small_letter_turned_h == '\x0265') (error "latin small letter turned h code point")
	>> unless (latin_letter_small_capital_h == 'ʜ') (error "latin letter small capital h")
	>> unless (latin_letter_small_capital_h == '\x029C') (error "latin letter small capital h code point")
	>> unless (latin_letter_reversed_glottal_stop_with_stroke == 'ʢ') (error "latin letter reversed glottal stop with stroke")
	>> unless (latin_letter_reversed_glottal_stop_with_stroke == '\x02A2') (error "latin letter reversed glottal stop with stroke code point")
	>> unless (latin_letter_glottal_stop_with_stroke == 'ʡ') (error "latin letter glottal stop with stroke")
	>> unless (latin_letter_glottal_stop_with_stroke == '\x02A1') (error "latin letter glottal stop with stroke code point")
	>> unless (latin_small_letter_c_with_curl == 'ɕ') (error "latin small letter c with curl")
	>> unless (latin_small_letter_c_with_curl == '\x0255') (error "latin small letter c with curl code point")
	>> unless (latin_small_letter_z_with_curl == 'ʑ') (error "latin small letter z with curl")
	>> unless (latin_small_letter_z_with_curl == '\x0291') (error "latin small letter z with curl code point")
	>> unless (latin_small_letter_turned_r_with_long_leg == 'ɺ') (error "latin small letter turned r with long leg")
	>> unless (latin_small_letter_turned_r_with_long_leg == '\x027A') (error "latin small letter turned r with long leg code point")
	>> unless (latin_small_letter_heng_with_hook == 'ɧ') (error "latin small letter heng with hook")
	>> unless (latin_small_letter_heng_with_hook == '\x0267') (error "latin small letter heng with hook code point")
	>> unless (combining_double_inverted_breve == '͡') (error "combining double inverted breve")
	>> unless (combining_double_inverted_breve == '\x0361') (error "combining double inverted breve code point")
	>> unless (combining_double_breve_below == '͜') (error "combining double breve below")
	>> unless (combining_double_breve_below == '\x035C') (error "combining double breve below code point")
	>> unless (modifier_letter_vertical_line == 'ˈ') (error "modifier letter vertical line")
	>> unless (modifier_letter_vertical_line == '\x02C8') (error "modifier letter vertical line code point")
	>> unless (modifier_letter_low_vertical_line == 'ˌ') (error "modifier letter low vertical line")
	>> unless (modifier_letter_low_vertical_line == '\x02CC') (error "modifier letter low vertical line code point")
	>> unless (modifier_letter_triangular_colon == 'ː') (error "modifier letter triangular colon")
	>> unless (modifier_letter_triangular_colon == '\x02D0') (error "modifier letter triangular colon code point")
	>> unless (modifier_letter_half_triangular_colon == 'ˑ') (error "modifier letter half triangular colon")
	>> unless (modifier_letter_half_triangular_colon == '\x02D1') (error "modifier letter half triangular colon code point")
	>> unless (combining_breve == '̆') (error "combining breve")
	>> unless (combining_breve == '\x0306') (error "combining breve code point")
	>> unless (vertical_line == '|') (error "vertical line")
	>> unless (vertical_line == '\x007C') (error "vertical line code point")
	>> unless (double_vertical_line == '‖') (error "double vertical line")
	>> unless (double_vertical_line == '\x2016') (error "double vertical line code point")
	>> unless (full_stop == '.') (error "full stop")
	>> unless (full_stop == '\x002E') (error "full stop code point")
	>> unless (undertie == '‿') (error "undertie")
	>> unless (undertie == '\x203F') (error "undertie code point")
	>> unless (combining_ring_below == '̥') (error "combining ring below")
	>> unless (combining_ring_below == '\x0325') (error "combining ring below code point")
	>> unless (combining_ring_above == '̊') (error "combining ring above")
	>> unless (combining_ring_above == '\x030A') (error "combining ring above code point")


	>> unless (combining_caron_below == '̬') (error "combining caron below")
	>> unless (combining_caron_below == '\x032C') (error "combining caron below code point")
	>> unless (modifier_letter_small_h == 'ʰ') (error "modifier letter small h")
	>> unless (modifier_letter_small_h == '\x02B0') (error "modifier letter small h code point")
	>> unless (combining_right_half_ring_below == '̹') (error "combining right half ring below")
	>> unless (combining_right_half_ring_below == '\x0339') (error "combining right half ring below code point")
	>> unless (combining_left_half_ring_below == '̜') (error "combining left half ring below")
	>> unless (combining_left_half_ring_below == '\x031C') (error "combining left half ring below code point")
	>> unless (combining_plus_sign_below == '̟') (error "combining plus sign below")
	>> unless (combining_plus_sign_below == '\x031F') (error "combining plus sign below")
	>> unless (combining_minus_sign_below == '̠') (error "combining minus sign below")
	>> unless (combining_minus_sign_below == '\x0320') (error "combining minus sign below code point")
	>> unless (combining_diaeresis == '̈') (error "combining diaeresis")
	>> unless (combining_diaeresis == '\x0308') (error "combining diaeresis code point")
	>> unless (combining_x_above == '̽') (error "combining x above")
	>> unless (combining_x_above == '\x033D') (error "combining x above code point")

	>> unless (combining_vertical_line_above == '̍') (error "combining vertical line above")
	>> unless (combining_vertical_line_above == '\x030D') (error "combining vertical line above code point")
	>> unless (combining_vertical_line_below == '̩') (error "combining vertical line below")
	>> unless (combining_vertical_line_below == '\x0329') (error "combining vertical line below code point")
	>> unless (combining_dot_above == '̇') (error "combining dot above")
	>> unless (combining_dot_above == '\x0307') (error "combining dot above code point")
	>> unless (combining_dot_below == '̣') (error "combining dot below")
	>> unless (combining_dot_below == '\x0323') (error "combining dot below code point")
	>> unless (combining_inverted_breve_below == '̯') (error "combining inverted breve below")
	>> unless (combining_inverted_breve_below == '\x032F') (error "combining inverted breve below code point")
	>> unless (modifier_letter_rhotic_hook == '˞') (error "modifier letter rhotic hook")
	>> unless (modifier_letter_rhotic_hook == '\x02DE') (error "modifier letter rhotic hook code point")
	>> unless (combining_diaeresis_below == '̤') (error "combining diaeresis below")
	>> unless (combining_diaeresis_below == '\x0324') (error "combining diaeresis below code point")
	>> unless (combining_tilde_below == '̰') (error "combining tilde below")
	>> unless (combining_tilde_below == '\x0330') (error "combining tilde below code point")
	>> unless (combining_seagul_below == '̼') (error "combining seagul below")
	>> unless (combining_seagul_below == '\x033C') (error "combining seagul below code point")
	>> unless (modifier_letter_small_w == 'ʷ') (error "modifier letter small w")
	>> unless (modifier_letter_small_w == '\x02B7') (error "modifier letter small w code point")
	>> unless (modifier_letter_small_j == 'ʲ') (error "modifier letter small j")
	>> unless (modifier_letter_small_j == '\x02B2') (error "modifier letter small j code point")
	>> unless (modifier_letter_small_gamma == 'ˠ') (error "modifier letter small gamma")
	>> unless (modifier_letter_small_gamma == '\x02E0') (error "modifier letter small gamma code point")
	>> unless (modifier_letter_small_reversed_glottal_stop == 'ˤ') (error "modifier letter small reversed glottal stop")
	>> unless (modifier_letter_small_reversed_glottal_stop == '\x02E4') (error "modifier letter small reversed glottal stop code point")
	>> unless (combining_tilde_overlay == '̴') (error "combining tilde overlay")
	>> unless (combining_tilde_overlay == '\x0334') (error "combining tilde overlay code point")
	>> unless (combining_up_tack_below == '̝') (error "combining up tack below")
	>> unless (combining_up_tack_below == '\x031D') (error "combining up tack below code point")
	>> unless (combining_down_tack_below == '̞') (error "combining down tack below")
	>> unless (combining_down_tack_below == '\x031E') (error "combining down tack below code point")
	>> unless (combining_left_tack_below == '̘') (error "combining left tack below")
	>> unless (combining_left_tack_below == '\x0318') (error "combining left tack below code point")
	>> unless (combining_right_tack_below == '̙') (error "combining right tack below")
	>> unless (combining_right_tack_below == '\x0319') (error "combining right tack below code point")
	>> unless (combining_bridge_below == '̪') (error "combining bridge below")
	>> unless (combining_bridge_below == '\x032A') (error "combining bridge below code point")
	>> unless (combining_inverted_bridge_below == '̺') (error "combining inverted bridge below")
	>> unless (combining_inverted_bridge_below == '\x033A') (error "combining inverted bridge below code point")
	>> unless (combining_square_below == '̻') (error "combining square below")
	>> unless (combining_square_below == '\x033B') (error "combining square below code point")
	>> unless (combining_tilde == '̃') (error "combining tilde")
	>> unless (combining_tilde == '\x0303') (error "combining tilde code point")
	>> unless (superscript_latin_small_letter_n == 'ⁿ') (error "superscript latin small letter n")
	>> unless (superscript_latin_small_letter_n == '\x207F') (error "superscript latin small letter n code point")
	>> unless (modifier_letter_small_l == 'ˡ') (error "modifier letter small l")
	>> unless (modifier_letter_small_l == '\x02E1') (error "modifier letter small l code point")
	>> unless (combining_left_angle_above == '̚') (error "combining left angle above")
	>> unless (combining_left_angle_above == '\x031A') (error "combining left angle above code point")
	>> unless (combining_double_acute_accent == '̋') (error "combining double acute accent")
	>> unless (combining_double_acute_accent == '\x030B') (error "combining double acute accent code point")
	>> unless (combining_acute_accent == '́') (error "combining acute accent")
	>> unless (combining_acute_accent == '\x0301') (error "combining acute accent code point")
	>> unless (combining_macron == '̄') (error "combining macron")
	>> unless (combining_macron == '\x0304') (error "combining macron code point")
	>> unless (combining_grave_accent == '̀') (error "combining grave accent")
	>> unless (combining_grave_accent == '\x0300') (error "combining grave accent code point")
	>> unless (combining_double_grave_accent == '̏') (error "combining double grave accent")
	>> unless (combining_double_grave_accent == '\x030F') (error "combining double grave accent code point")
	>> unless (downwards_arrow == '↓') (error "downwards arrow")
	>> unless (downwards_arrow == '\x2193') (error "downwards arrow code point")
	>> unless (combining_caron == '̌') (error "combining caron")
	>> unless (combining_caron == '\x030C') (error "combining caron code point")
	>> unless (combining_circumflex_accent == '̂') (error "combining circumflex accent")
	>> unless (combining_circumflex_accent == '\x0302') (error "combining circumflex accent code point")
	>> unless (combining_macron_acute == '᷄') (error "combining macron acute")
	>> unless (combining_macron_acute == '\x1DC4') (error "combining macron acute code point")
	>> unless (combining_grave_macron == '᷅') (error "combining grave macron")
	>> unless (combining_grave_macron == '\x1DC5') (error "combining grave macron code point")
	>> unless (combining_grave_acute_grave == '᷈') (error "combining grave acute grave")
	>> unless (combining_grave_acute_grave == '\x1DC8') (error "combining grave acute grave code point")
	>> unless (north_east_arrow == '↗') (error "north east arrow")
	>> unless (north_east_arrow == '\x2197') (error "north east arrow code point")
	>> unless (south_east_arrow == '↘') (error "south east arrow")
	>> unless (south_east_arrow == '\x2198') (error "south east arrow code point")
	>> unless (downwards_arrow == '↓') (error "downwards arrow")
	>> unless (downwards_arrow == '\x2193') (error "downwards arrow code point")
	>> unless (upwards_arrow == '↑') (error "upwards arrow")
	>> unless (upwards_arrow == '\x2191') (error "upwards arrow code point")
	>> unless (modifier_letter_extra_high_tone_bar == '˥') (error "modifier letter extra high tone bar")
	>> unless (modifier_letter_extra_high_tone_bar == '\x02E5') (error "modifier letter extra high tone bar code point")
	>> unless (modifier_letter_high_tone_bar == '˦') (error "modifier letter high tone bar")
	>> unless (modifier_letter_high_tone_bar == '\x02E6') (error "modifier letter high tone bar code point")
	>> unless (modifier_letter_mid_tone_bar == '˧') (error "modifier letter mid tone bar")
	>> unless (modifier_letter_mid_tone_bar == '\x02E7') (error "modifier letter mid tone bar code point")
	>> unless (modifier_letter_low_tone_bar == '˨') (error "modifier letter low tone bar")
	>> unless (modifier_letter_low_tone_bar == '\x02E8') (error "modifier letter low tone bar code point")
	>> unless (modifier_letter_extra_low_tone_bar == '˩') (error "modifier letter extra low tone bar")
	>> unless (modifier_letter_extra_low_tone_bar == '\x02E9') (error "modifier letter extra low tone bar")
